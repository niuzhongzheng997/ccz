import json
import boto3
from datetime import datetime, timedelta
from botocore.exceptions import ClientError

def lambda_handler(event, context):
    """
    专门查询过去一周EC2实例中project=Adhoc标签的每日成本
    """
    try:
        # 创建Cost Explorer客户端
        ce_client = boto3.client('ce')
        
        # 设置时间范围（过去7天）
        end_date = datetime.utcnow().date()
        start_date = end_date - timedelta(days=7)
        
        # 构建Cost Explorer请求 - 精确查询EC2实例 + project=Adhoc标签
        cost_request = {
            'TimePeriod': {
                'Start': start_date.isoformat(),
                'End': end_date.isoformat()
            },
            'Granularity': 'DAILY',  # 每天的数据
            'Metrics': ['UnblendedCost'],  # 实际成本
            'Filter': {
                'And': [
                    # 筛选EC2实例服务
                    {
                        'Dimensions': {
                            'Key': 'SERVICE',
                            'Values': ['Amazon Elastic Compute Cloud - Compute']
                        }
                    },
                    # 筛选project=Adhoc标签
                    {
                        'Tags': {
                            'Key': 'project',
                            'Values': ['Adhoc']
                        }
                    }
                ]
            },
            'GroupBy': [
                {
                    'Type': 'DIMENSION',
                    'Key': 'SERVICE'
                },
                {
                    'Type': 'TAG',
                    'Key': 'project'
                }
            ]
        }
        
        print(f"查询参数: {json.dumps(cost_request, default=str)}")
        
        # 调用Cost Explorer API
        response = ce_client.get_cost_and_usage(**cost_request)
        
        # 处理响应数据
        formatted_data = process_cost_data(response)
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'query_period': {
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat(),
                    'days': 7
                },
                'filters': {
                    'service': 'EC2 Compute',
                    'tag': {'key': 'project', 'value': 'Adhoc'}
                },
                'cost_data': formatted_data,
                'summary': calculate_summary(formatted_data)
            }, default=str)
        }
        
    except ClientError as e:
        error_message = f"AWS API Error: {str(e)}"
        print(error_message)
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': 'Cost Explorer API Error',
                'message': error_message
            })
        }
    except Exception as e:
        error_message = f"Processing Error: {str(e)}"
        print(error_message)
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'error': 'Processing Error',
                'message': error_message
            })
        }

def process_cost_data(response):
    """
    处理Cost Explorer返回的数据
    """
    results = []
    
    for result in response.get('ResultsByTime', []):
        day_data = {
            'date': result['TimePeriod']['Start'],
            'total_cost': 0,
            'services': []
        }
        
        # 处理分组数据
        for group in result.get('Groups', []):
            keys = group['Keys']
            amount = float(group['Metrics']['UnblendedCost']['Amount'])
            
            if amount > 0:  # 只显示有成本的数据
                service_info = {
                    'service': keys[0] if len(keys) > 0 else 'Unknown',
                    'tag_value': keys[1] if len(keys) > 1 else 'Unknown',
                    'cost': amount,
                    'currency': group['Metrics']['UnblendedCost']['Unit']
                }
                
                day_data['services'].append(service_info)
                day_data['total_cost'] += amount
        
        # 只添加有成本数据的日期
        if day_data['total_cost'] > 0:
            results.append(day_data)
    
    return results

def calculate_summary(cost_data):
    """
    计算成本汇总信息
    """
    total_cost = sum(day['total_cost'] for day in cost_data)
    days_with_cost = len(cost_data)
    
    return {
        'total_period_cost': round(total_cost, 2),
        'days_with_spending': days_with_cost,
        'average_daily_cost': round(total_cost / max(days_with_cost, 1), 2)
    }
